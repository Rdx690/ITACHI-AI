const settings = require('../settings');
const fs = require('fs');
const path = require('path');
const os = require('os');

// Format uptime properly
function formatUptime(seconds) {
    const days = Math.floor(seconds / (24 * 60 * 60));
    seconds = seconds % (24 * 60 * 60);
    const hours = Math.floor(seconds / (60 * 60));
    seconds = seconds % (60 * 60);
    const minutes = Math.floor(seconds / 60);
    seconds = Math.floor(seconds % 60);

    let time = '';
    if (days > 0) time += `${days}d `;
    if (hours > 0) time += `${hours}h `;
    if (minutes > 0) time += `${minutes}m `;
    if (seconds > 0 || time === '') time += `${seconds}s`;

    return time.trim();
}

// Format RAM usage
function formatRam(total, free) {
    const used = (total - free) / (1024 * 1024 * 1024);
    const totalGb = total / (1024 * 1024 * 1024);
    const percent = ((used / totalGb) * 100).toFixed(1);
    return `${used.toFixed(1)}GB / ${totalGb.toFixed(1)}GB (${percent}%)`;
}

// Count total commands
function countCommands() {
    return 133; // Replace with actual command count
}

// Get Asia/Kolkata Time
function getKolkataTime() {
    return new Date(new Date().toLocaleString('en-US', { timeZone: 'Asia/Kolkata' }));
}
function formatKolkataTime() {
    const t = getKolkataTime();
    return `${t.getHours().toString().padStart(2, '0')}:${t.getMinutes().toString().padStart(2, '0')}`;
}

async function helpCommand(sock, chatId, message) {
    const helpMessage = `
 ‚ùè *‚åú ‚ùÉ ùêàùêìùêÄùêÇùêáùêà - ùêÄùêà ‚ùÉ ‚åü* ‚ùè
‚îÇ
‚ùÉ Owner: ${settings.botOwner || 'Sourajit'}
‚ùÉ Prefix: .
‚ùÉ User: ${message.pushName}
‚ùÉ Version: ${settings.version || '2.0.8'}
‚ùÉ Time: ${formatKolkataTime()} (Asia/Kolkata)
‚ùÉ Uptime: ${formatUptime(process.uptime())}
‚ùÉ Commands: 158
‚ùÉ Date: ${new Date().toLocaleDateString('en-GB')}
‚ùÉ Mode: ${settings.mode || 'Public'}
‚îî ‚ùè_________________‚óÜ

‚îå ‚ùè *‚åú GENERAL ‚åü* ‚ùè
‚ùÉ .help / .menu
‚ùÉ .ping
‚ùÉ .alive
‚ùÉ .tts
‚ùÉ .owner
‚ùÉ .joke
‚ùÉ .quote
‚ùÉ .fact
‚ùÉ .weather
‚ùÉ .news
‚ùÉ .attp
‚ùÉ .lyrics
‚ùÉ .8ball
‚ùÉ .groupinfo
‚ùÉ .staff
‚ùÉ .vv
‚ùÉ .trt
‚ùÉ .ss
‚ùÉ .jid
‚îî ‚ùè_______________‚óÜ

‚îå ‚ùè *‚åú ADMIN ‚åü* ‚ùè
‚ùÉ .ban
‚ùÉ .promote
‚ùÉ .demote
‚ùÉ .mute
‚ùÉ .unmute
‚ùÉ .delete
‚ùÉ .kick
‚ùÉ .warnings
‚ùÉ .warn
‚ùÉ .antilink
‚ùÉ .antibadword
‚ùÉ .clear
‚ùÉ .tag
‚ùÉ .tagall
‚ùÉ .chatbot
‚ùÉ .resetlink
‚ùÉ .vcf
‚ùÉ .antitag
‚ùÉ .welcome
‚ùÉ .goodbye
‚îî ‚ùè

‚îå ‚ùè *‚åú OWNER ‚åü* ‚ùè
‚ùÉ .mode
‚ùÉ .autostatus
‚ùÉ .clearsession
‚ùÉ .antidelete
‚ùÉ .cleartmp
‚ùÉ .update
‚ùÉ .setpp
‚ùÉ .autoreact
‚ùÉ .autotyping
‚ùÉ .autoread
‚ùÉ .anticall
‚îî ‚ùè

‚îå ‚ùè *‚åú IMAGE/STICKER ‚åü* ‚ùè
‚ùÉ .blur
‚ùÉ .simage
‚ùÉ .sticker
‚ùÉ .tgsticker
‚ùÉ .meme
‚ùÉ .take
‚ùÉ .emojimix
‚ùÉ .igs
‚ùÉ .igsc
‚ùÉ .removebg
‚ùÉ .remini
‚ùÉ .crop
‚îî ‚ùè

‚îå ‚ùè *‚åú PIES ‚åü* ‚ùè
‚ùÉ .pies
‚ùÉ .china
‚ùÉ .indonesia
‚ùÉ .japan
‚ùÉ .korea
‚ùÉ .hijab
‚îî ‚ùè

‚îå ‚ùè *‚åú GAME ‚åü* ‚ùè
‚ùÉ .tictactoe
‚ùÉ .hangman
‚ùÉ .guess
‚ùÉ .trivia
‚ùÉ .answer
‚ùÉ .truth
‚ùÉ .dare
‚îî ‚ùè

‚îå ‚ùè *‚åú AI ‚åü* ‚ùè
‚ùÉ .gpt
‚ùÉ .gemini
‚ùÉ .imagine
‚ùÉ .flux
‚ùÉ .godszeal
‚îî ‚ùè

‚îå ‚ùè *‚åú FUN ‚åü* ‚ùè
‚ùÉ .compliment
‚ùÉ .insult
‚ùÉ .flirt
‚ùÉ .shayari
‚ùÉ .goodnight
‚ùÉ .roseday
‚ùÉ .character
‚ùÉ .wasted
‚ùÉ .ship
‚ùÉ .simp
‚ùÉ .stupid
‚îî ‚ùè

‚îå ‚ùè *‚åú TEXTMAKER ‚åü* ‚ùè
‚ùÉ .metallic
‚ùÉ .ice
‚ùÉ .snow
‚ùÉ .impressive
‚ùÉ .matrix
‚ùÉ .light
‚ùÉ .neon
‚ùÉ .devil
‚ùÉ .purple
‚ùÉ .thunder
‚ùÉ .leaves
‚ùÉ .1917
‚ùÉ .arena
‚ùÉ .hacker
‚ùÉ .sand
‚ùÉ .blackpink
‚ùÉ .glitch
‚ùÉ .fire
‚îî ‚ùè

‚îå ‚ùè *‚åú DOWNLOAD ‚åü* ‚ùè
‚ùÉ .play
‚ùÉ .song
‚ùÉ .instagram
‚ùÉ .facebook
‚ùÉ .tiktok
‚ùÉ .video
‚ùÉ .ytmp4
‚ùÉ .movie
‚îî ‚ùè

‚îå ‚ùè *‚åú DEVELOPER ‚åü* ‚ùè
‚ùÉ .createapi
‚ùÉ .dev
‚ùÉ .developer
‚îî ‚ùè

‚îå ‚ùè *‚åú TOOLS ‚åü* ‚ùè
‚ùÉ .tempnum
‚ùÉ .templist
‚ùÉ .otpbox
‚îî ‚ùè

‚îå ‚ùè *‚åú MISC ‚åü* ‚ùè
‚ùÉ .heart
‚ùÉ .horny
‚ùÉ .circle
‚ùÉ .lgbt
‚ùÉ .lolice
‚ùÉ .its-so-stupid
‚ùÉ .namecard
‚ùÉ .oogway
‚ùÉ .tweet
‚ùÉ .ytcomment
‚ùÉ .comrade
‚ùÉ .gay
‚ùÉ .glass
‚ùÉ .jail
‚ùÉ .passed
‚ùÉ .triggered
‚îî ‚ùè

‚îå ‚ùè *‚åú ANIME ‚åü* ‚ùè
‚ùÉ .neko
‚ùÉ .waifu
‚ùÉ .loli
‚ùÉ .nom
‚ùÉ .poke
‚ùÉ .cry
‚ùÉ .kiss
‚ùÉ .pat
‚ùÉ .hug
‚ùÉ .wink
‚ùÉ .facepalm
‚îî ‚ùè

‚îå ‚ùè *‚åú GITHUB ‚åü* ‚ùè
‚ùÉ .git
‚ùÉ .github
‚ùÉ .sc
‚ùÉ .script
‚ùÉ .repo
‚îî ‚ùè

‚îå ‚ùè *‚åú CHANNEL ‚åü* ‚ùè
‚ùÉ ITACHI-AI ‚ùÉ
‚îî ‚ùè

> Powered by *Itachi - AI* ‚ö°
`;

    try {
        const imagePath = path.join(__dirname, '../assets/bot_image.jpg');

        if (fs.existsSync(imagePath)) {
            const imageBuffer = fs.readFileSync(imagePath);
            await sock.sendMessage(chatId, {
                image: imageBuffer,
                caption: helpMessage,
                contextInfo: {
                    forwardingScore: 1,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '120363421562914957@newsletter',
                        newsletterName: '‚ù¶ ‚ïê‚ïê‚ïê‚ïê ‚Ä¢‚ä∞‚ùÇ ITACHI - AI ‚ùÇ‚ä±‚Ä¢ ‚ïê‚ïê‚ïê‚ïê ‚ù¶',
                        serverMessageId: -1
                    }
                }
            }, { quoted: message });
        } else {
            await sock.sendMessage(chatId, {
                text: helpMessage,
                contextInfo: {
                    forwardingScore: 1,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '1203634215629149578@newsletter',
                        newsletterName: '‚ù¶ ‚ïê‚ïê‚ïê‚ïê ‚Ä¢‚ä∞‚ùÇ ITACHI - AI ‚ùÇ‚ä±‚Ä¢ ‚ïê‚ïê‚ïê‚ïê ‚ù¶',
                        serverMessageId: -1
                    }
                }
            }, { quoted: message });
        }
    } catch (error) {
        console.error('Error in help command:', error);
        await sock.sendMessage(chatId, { text: helpMessage }, { quoted: message });
    }
}

module.exports = helpCommand;
